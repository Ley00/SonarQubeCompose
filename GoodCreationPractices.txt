#Tutorial: Criando um Docker Compose com Boas Práticas
Neste tutorial, vamos criar um arquivo Docker Compose seguindo boas práticas. Iremos criar um ambiente para o SonarQube, utilizando um banco de dados PostgreSQL e um scanner para análise de código.

##Passo 1: Criar o arquivo Docker Compose
Crie um novo arquivo chamado docker-compose.yml no diretório desejado. Você pode usar qualquer editor de texto para isso. Certifique-se de que o arquivo tenha permissões de leitura e gravação.

version: "3.8"

networks:
  main-network:

services:
  postgres:
    image: postgres
    container_name: MyPostgres
    environment:
      POSTGRES_PASSWORD: mypassword
      POSTGRES_USER: myuser
      POSTGRES_DB: mydatabase
    volumes:
      - /path/to/postgres/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - main-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  sonarqube:
    image: sonarqube
    container_name: MySonarQube
    environment:
      sonar.jdbc.username: sonar
      sonar.jdbc.password: sonar
      sonar.jdbc.url: jdbc:postgresql://postgres/mydatabase
    volumes:
      - /path/to/sonarqube/data:/opt/SonarQube/data
      - /path/to/sonarqube/logs:/opt/SonarQube/logs
      - /path/to/sonarqube/extensions:/opt/SonarQube/extensions
      - /path/to/sonarqube/plugins:/opt/sonarqube/lib/bundled-plugins
    ports:
      - "9000:9000"
    networks:
      - main-network
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 768M

  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:latest
    container_name: MySonarScanner
    volumes:
      - /path/to/scanner/workspace:/opt/sonar/scanner/workspace
    networks:
      - main-network
    depends_on:
      - sonarqube
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
Este exemplo configura um ambiente básico com o PostgreSQL, o SonarQube e um scanner para análise de código. Lembre-se de substituir /path/to pelos caminhos de diretórios desejados em seu sistema.

Passo 2: Configurar a Rede
Certifique-se de criar uma rede para os seus contêineres. No exemplo, utilizamos a rede chamada main-network. Certifique-se de substituir main-network por um nome significativo para o seu projeto.

networks:
  main-network:
Passo 3: Personalizar os Serviços
Para cada serviço, personalize os seguintes itens conforme suas necessidades:

container_name: Escolha nomes significativos para os contêineres.
environment: Configure as variáveis de ambiente conforme necessário.
volumes: Aponte para os diretórios em que deseja armazenar os dados persistentes.
ports: Mapeie as portas conforme necessário.
deploy: Personalize os recursos do serviço, como CPUs e memória.
Passo 4: Executar o Docker Compose
Após configurar o arquivo Docker Compose, salve-o e execute o seguinte comando no mesmo diretório:

docker-compose up -d
Isso iniciará os serviços definidos no arquivo Docker Compose em segundo plano (-d). Certifique-se de que o Docker Compose está instalado em seu sistema.
